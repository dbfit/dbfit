ext {
    fitNesseVersion = '20211006'
    mockitoVersion = '2.2.2'
    junitVersion = '4.13.2'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: 'signing'

    group = 'com.github.dbfit'
    version = rootProject.dbfitVersion

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        configFile = new File(parent.projectDir, "config/checkstyle/checkstyle.xml")
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
    }

    // Suppress stricter Java 8 Javadoc checks.
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    repositories {
        flatDir {
            dirs "${rootProject.projectDir}/custom_libs"
        }
        mavenCentral()
        maven {
            url "http://mvnrepository.com"
        }
        ivy {
            artifactPattern "https://s3.amazonaws.com/dbfit/[artifact]-[revision].[ext]"
            ivyPattern "https://aws.amazon.com/s3/ivy.xml"
            metadataSources {
                ivyDescriptor()
                artifact()
            }
        }
    }

    dependencies {
        compile "org.fitnesse:fitnesse:${fitNesseVersion}:standalone@jar"
    }

    // fix gradle .classpath generation for bin folders and put it under /build/eclipse
    eclipse {
        classpath {
            defaultOutputDir = file('build/eclipse') // this should be enough, but it's not
            file.whenMerged {
                entries.each { entry ->
                    if (entry instanceof org.gradle.plugins.ide.eclipse.model.Output) {
                        entry.path = entry.path.replaceFirst('^bin', 'build/eclipse')
                    }

                    if (entry instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
                        entry.output = entry.output.replaceFirst('^bin', 'build/eclipse')
                    }
                }
            }
        }
    }
}

subprojects {
    jar.baseName = "dbfit-" + project.archivesBaseName

    task libs(type: Copy) {
        from configurations.runtime
        into "$buildDir/libs"
    }

    sourceSets {
        integrationTest {
            java {
                srcDir 'src/integration-test/java'
            }
            resources {
                srcDir 'src/integration-test/resources'
            }
        }
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:java-hamcrest:2.0.0.0"
        testCompile "commons-io:commons-io:2.4"
        testRuntime 'com.dbdeploy:dbdeploy-ant:3.0M3'
        integrationTestCompile "junit:junit:${junitVersion}"
        integrationTestCompile "org.fitnesse:fitnesse:${fitNesseVersion}:standalone@jar"
    }

    task integrationTestJar(type: Jar) {
        from sourceSets.integrationTest.output
        baseName = "dbfit-" + project.archivesBaseName + "-integration-test"
        include('**/*Support*')
    }

    task deploymentProperties {
        doLast {
            ext {
                delimiterType = 'normal'
                delimiter = ';'
                setUpTestScriptPath = "${rootProject.projectDir}/test_vm/scripts/${project.name}/sql/"
                setUpTestDbScript = setUpTestScriptPath + "create-databases-${project.name}.sql"
                tearDownTestDbScript = setUpTestScriptPath + "drop-databases-${project.name}.sql"
            }
        }
    }

    // to be overriden when needed
    ext.connectionPropertiesFiles = []

    ext.getConnectionFileProperties = { connectionPropertiesFile ->
        def props = new Properties()
        file(connectionPropertiesFile).withInputStream { props.load(it) }
        return [props.username, props.password, props.service, props.database]
    }

    task connectionFileProperties {
        doLast {
            copyConnectionProperties '.'
            ext {
                userName = ''
                passWord = ''
                service = ''
                database = ''
            }
            if (connectionPropertiesFiles) {
                (userName, passWord, service, database) =
                    getConnectionFileProperties(connectionPropertiesFiles[0])
            }
        }
    }

    ext.getJdbcUrl = { service, database ->
    }

    task dbConnectionProperties(dependsOn: [deploymentProperties, connectionFileProperties]) {
        doLast {
            ext.jdbcUrl = getJdbcUrl(connectionFileProperties.service,
                connectionFileProperties.database)
        }
    }

    task adminConnectionFileProperties {
        doLast {
            copyProperties new File(project.projectDir, adminConnectionPropertiesFile), '.'
            ext {
                (userName, passWord, service, database) =
                    getConnectionFileProperties(adminConnectionPropertiesFile)
            }
        }
    }

    task dbAdminConnectionProperties(dependsOn: [adminConnectionFileProperties, deploymentProperties]) {
        doLast {
            ext.jdbcUrl = getJdbcUrl(adminConnectionFileProperties.service,
                adminConnectionFileProperties.database)
        }
    }

    task integrationTest(type: Test, dependsOn: dbConnectionProperties) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        classpath += sourceSets.main.runtimeClasspath
    }

    ext.dbdeploy = {
        dbDriver, url, userid, password, delimiterType = 'normal', delimiter = ';',
        dir = "$projectDir/src/integration-test/resources" ->
        ant.taskdef(name: 'dbdeploy',
                classname: 'com.dbdeploy.AntTarget',
                classpath: configurations.testRuntime.asPath)
        ant.dbdeploy(driver: dbDriver,
                url: url,
                userid: userid,
                password: password,
                dir: dir,
                delimiterType: delimiterType,
                delimiter: delimiter)
    }

    ext.createTestDbObjects = {
        dbdeploy(deploymentProperties.jdbcDriverClass,
            dbConnectionProperties.jdbcUrl,
            connectionFileProperties.userName,
            connectionFileProperties.passWord,
            deploymentProperties.delimiterType,
            deploymentProperties.delimiter)
    }

    ext.sql = {
        dbDriver, url, userid, password, sourceFile, delimiterType = 'normal',
        delimiter = ';', autocommit = true ->
        ant.sql(classpath: configurations.runtime.asPath,
                driver: dbDriver,
                url: url,
                userid: userid,
                password: password,
                delimiterType: delimiterType,
                delimiter: delimiter,
                autocommit: autocommit,
                src: sourceFile)
    }

    ext.copyProperties = {
        file, destination ->
            copy {
                from "${file}.default"
                into destination
                rename "(.*)\\.default", '$1'
            }
            copy {
                from "${file}.custom"
                into destination
                rename "(.*)\\.custom", '$1'
            }
    }

    ext.copyConnectionProperties = {
        destination ->
            project.connectionPropertiesFiles.each { file ->
                copyProperties new File(project.projectDir, file), destination
            }
    }

    ext.execSqlScriptTestDatabase = { scriptFile ->
        sql(deploymentProperties.jdbcDriverClass,
            dbAdminConnectionProperties.jdbcUrl,
            adminConnectionFileProperties.userName,
            adminConnectionFileProperties.passWord,
            scriptFile,
            deploymentProperties.delimiterType,
            deploymentProperties.delimiter,
            deploymentProperties.autoCommit)
    }

    task setUpTestDatabase(dependsOn: dbAdminConnectionProperties) {
        doLast {
            execSqlScriptTestDatabase(deploymentProperties.setUpTestDbScript)
        }
    }

    task tearDownTestDatabase(dependsOn: dbAdminConnectionProperties) {
        doLast {
            execSqlScriptTestDatabase(deploymentProperties.tearDownTestDbScript)
        }
    }

    integrationTest.inputs.dir file("$projectDir/../../FitNesseRoot/DbFit/AcceptanceTests/JavaTests")
    integrationTest.doFirst {
        copyConnectionProperties '.'
    }
}

task assembleAll(dependsOn: subprojects.assemble) { }
task libs(dependsOn: subprojects.libs) { }

def publicCoreCompileDeps = [
    'org.reflections:reflections:0.9.11',
    'commons-codec:commons-codec:1.10',
    'org.apache.commons:commons-lang3:3.4',
    'com.github.dbfit:fitlibrary:20091020'
]

project('core') {
    description = 'DBFit core api and fixtures'

    dependencies {
        compile publicCoreCompileDeps
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
    }
}

project('db2') {
    description = 'DBFit db2 engine'

    dependencies {
        compile project(':dbfit-java:core')
        runtime 'com.ibm.db2:db2jcc4:4.17.29@jar'
    }
}

project('derby') {
    description = 'DBFit derby engine'
    configurations {
        derby
        testRuntime.extendsFrom derby
        integrationTestRuntime.extendsFrom derby
    }
    dependencies {
        compile project(':dbfit-java:core')
        derby group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'
        derby group: 'org.apache.derby', name: 'derbyclient', version: '10.12.1.1'
    }
}

def publicHsqldbRuntimeDeps = [
    'org.hsqldb:hsqldb:2.3.3@jar'
]

project('hsqldb') {
    description = 'DBFit HSQLDB engine'

    dependencies {
        compile project(':dbfit-java:core')
        runtime publicHsqldbRuntimeDeps
    }
}

project('informix') {
    description = 'DBFit Informix engine'

    ext.connectionPropertiesFiles = [
        'TestDbConnectionDbFitInformixANSI.properties',
        'TestDbConnectionDbFitInformixINFORMIX.properties']

    dependencies {
        compile project(':dbfit-java:core')
        compile 'com.informix:ifxjdbc:4.10.JC4W1@jar'
    }
}

def publicOracleCompileDeps = [
    'commons-io:commons-io:2.4'
]

project('oracle') {
    description = 'DBFit Oracle engine'

    dependencies {
        compile project(':dbfit-java:core')
        compile 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
        compile publicOracleCompileDeps
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
    }

    ext.connectionPropertiesFiles = ['TestDbConnectionDbFitOracle.properties']
}

def publicMysqlCompileDeps = [
    'mysql:mysql-connector-java:5.1.36'
]

project('mysql') {
    description = 'DBFit MySQL engine'

    dependencies {
        compile project(':dbfit-java:core')
        compile publicMysqlCompileDeps
        testCompile project(':dbfit-java:core').sourceSets.test.output
    }

    integrationTest.doFirst {
        dbdeploy('com.mysql.jdbc.Driver', 'jdbc:mysql://127.0.0.1/dbfit', 'dbfit_user', 'password')
    }
}

def publicPostgresCompileDeps = [
    'org.postgresql:postgresql:42.0.0.jre7'
]

project('postgres') {
    description = 'DBFit PostGreSQL engine'

    dependencies {
        compile project(':dbfit-java:core')
        compile publicPostgresCompileDeps
    }

    integrationTest.doFirst {
        dbdeploy('org.postgresql.Driver', 'jdbc:postgresql:dbfit', 'dbfit', 'dbfit', 'row')
    }
}

project('snowflake') {
    description = 'DBFit snowflake engine'

    dependencies {
        compile project(':dbfit-java:core')
        compile 'net.snowflake:snowflake-jdbc:3.13.0'
        testCompile project(':dbfit-java:core').sourceSets.test.output
    }

    ext.connectionPropertiesFiles = ['TestDbConnectionDbFitSnowflake.properties']

    integrationTest.doFirst {
        dbdeploy('net.snowflake.snowflake-jdbc', 'jdbc:snowflake://127.0.0.1', 'dbfit', 'DbFit000!', 'normal', 'GO')
    }
}

project('sqlserver') {
    description = 'DBFit sqlserver engine'

    dependencies {
        compile project(':dbfit-java:core')
        runtime 'com.microsoft:sqljdbc:4.1.5605@jar'
        integrationTestRuntime 'com.microsoft:sqljdbc:4.1.5605@jar'
    }

    integrationTest.doFirst {
        dbdeploy('com.microsoft.sqlserver.jdbc.SQLServerDriver', 'jdbc:sqlserver://127.0.0.1', 'dbfit', 'DbFit000!', 'normal', 'GO')
    }
}

project('teradata') {
    description = 'DBFit Teradata engine'

    dependencies {
        compile project(':dbfit-java:core')
        runtime 'com.teradata:terajdbc4:15.0.0.15@jar'
        runtime 'com.teradata:tdgssconfig:15.0.0.15@jar'
    }

    ext.connectionPropertiesFiles = ['TestDbConnectionDbFitTeradata.properties']
    ext.adminConnectionPropertiesFile = 'TestDbConnectionTeradataAdmin.properties'

    deploymentProperties.doLast {
        ext {
            jdbcDriverClass = 'com.teradata.jdbc.TeraDriver'
            jdbcDriverUrlPrefix = 'jdbc:teradata://'
            delimiterType = 'row'
            autoCommit = true
        }
    }

    ext.getJdbcUrl = { service, database ->
        return deploymentProperties.jdbcDriverUrlPrefix + service +
            '/TMODE=TERA,DATABASE=' + database
    }

    integrationTest.doFirst createTestDbObjects
}

project('netezza') {
    description = 'DBFit netezza engine'

    dependencies {
        compile project(':dbfit-java:core')
        runtime 'org.netezza:nzjdbc3:7.2@jar'
    }

    ext.connectionPropertiesFiles = ['TestDbConnectionDbFitNetezza.properties']
    ext.adminConnectionPropertiesFile = 'TestDbConnectionNetezzaAdmin.properties'

    deploymentProperties.doLast {
        ext {
            jdbcDriverClass = 'org.netezza.Driver'
            jdbcDriverUrlPrefix = 'jdbc:netezza://'
            delimiterType = 'row'
            autoCommit = true
        }
    }

    ext.getJdbcUrl = { service, database ->
        return deploymentProperties.jdbcDriverUrlPrefix + service + '/' + database
    }

    integrationTest.doFirst createTestDbObjects
}

// Aggregated dependencies to include in the POM file when publishing.
dependencies {
    compile publicCoreCompileDeps
    runtime publicHsqldbRuntimeDeps
    compile publicOracleCompileDeps
    compile publicMysqlCompileDeps
    compile publicPostgresCompileDeps
}

// Remove the default artifact as there are no Java sources for this project.
configurations.archives.artifacts.clear()

task allJavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    destinationDir = new File(buildDir, 'doc/javadoc')
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
}

task allJavadocJar(type: Jar) {
    baseName = 'dbfit'
    classifier = 'javadoc'
    from allJavadoc
}

task allSourcesJar(type: Jar) {
    baseName = 'dbfit'
    classifier = 'sources'
    subprojects.each { from it.sourceSets.main.allSource }
}

task allJar(type: Jar, dependsOn: subprojects.build) {
    baseName = 'dbfit'
    subprojects.each { from it.configurations.archives.allArtifacts.files.collect { zipTree(it) } }
}

artifacts {
    archives allJar, allJavadocJar, allSourcesJar
}

signing {
    required { rootProject.isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            if (!project.hasProperty('ossrhUsername')) {
                project.ext.set('ossrhUsername', '')
            }

            if (!project.hasProperty('ossrhPassword')) {
                project.ext.set('ossrhPassword', '')
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'DbFit'
                packaging 'jar'
                description 'Database test automation for FitNesse'

                url 'http://dbfit.github.io/dbfit/index.html'
                scm {
                    connection 'scm:git@github.com/dbfit/dbfit.git'
                    developerConnection 'scm:git@github.com/dbfit/dbfit.git'
                    url 'https://github.com/dbfit/dbfit.git'
                }

                licenses {
                    license {
                        name 'GNU General Public License, version 2'
                        url 'https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html'
                    }
                }

                developers {
                    developer {
                        id "benilovj"
                        name "Jake Benilov"
                    }
                    developer {
                        id "javornikolov"
                        name "Yavor Nikolov"
                    }
                    developer {
                        id "mmatten"
                        name "Mark Matten"
                    }
                }
            }
        }
    }
}

