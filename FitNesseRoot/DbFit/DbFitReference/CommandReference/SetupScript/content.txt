''Next page: [[!-Query-!][.DbFit.DbFitReference.CommandReference.QueryCommand]] Parent page: [[!-Command reference-!][.DbFit.DbFitReference.CommandReference]]''
!2 !-Set-up Script-!
!-Here is a simple script to create the objects required for examples in this chapter (you'll also find it in the scripts directory of the -!'''!-dbfit-complete-!'''!- package): -!

.#mysql
.#postgresql

!anchor mysql

for MySQL
{{{
create database dbfit;

grant all privileges on dbfit.* to dftest@localhost identified by 'dftest';

grant all privileges on dbfit.* to dftest@127.0.0.1 identified by 'dftest';

grant all privileges on dbfit.* to dbfit_user@localhost identified by 'password';

grant all privileges on dbfit.* to dbfit_user@127.0.0.1 identified by 'password';

grant select on mysql.* to dbfit_user;

flush privileges;

use dbfit;

create table users(name varchar(50) unique, username varchar(50), userid int auto_increment primary key) ENGINE=InnoDB;

CREATE PROCEDURE ConcatenateStrings (IN firststring varchar(100), IN secondstring varchar(100), OUT concatenated varchar(200)) set concatenated = concat(firststring , concat( ' ' , secondstring ));

create procedure CalcLength(IN name varchar(100), OUT strlength int) set strlength =length(name);

CREATE FUNCTION ConcatenateF (firststring  VARCHAR(100), secondstring varchar(100)) RETURNS VARCHAR(200) RETURN CONCAT(firststring,' ',secondstring);

create procedure makeuser() insert into users (name,username) values ('user1','fromproc');

create procedure createuser(IN newname varchar(100), IN newusername varchar(100)) insert into users (name,username) values (newname, newusername);

create procedure Multiply(IN factor int, INOUT val int) set val =val*factor;
}}}

!anchor postgresql

for PostgreSQL
{{{
CREATE DATABASE dbfit;
CREATE USER dbfit PASSWORD dbfit;
GRANT ALL PRIVILEGES ON DATABASE dbfit TO dbfit ;
GRANT USAGE ON SCHEMA public TO dbfit;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO dbfit;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO dbfit;

USE dbfit;

CREATE TABLE users( userid SERIAL PRIMARY KEY, name VARCHAR(50) UNIQUE , username VARCHAR(50))

CREATE OR REPLACE FUNCTION ConcatenateStrings(
    firststring varchar(100), 
    secondstring varchar(100),
    OUT concatenated varchar(200)
) LANGUAGE plpgsql
AS $$
BEGIN
    concatenated :=  concat(firststring , concat( ' ' , secondstring ));
END $$;

CREATE OR REPLACE FUNCTION CalcLength(name varchar(100),  OUT strlength int)
AS $$
BEGIN
   strlength := length(name);
END;$$ 
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION ConcatenateF (firststring  VARCHAR(100), secondstring varchar(100)) 
RETURNS VARCHAR(200) AS $$
BEGIN 
    RETURN CONCAT(firststring,' ',secondstring);
END;$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE PROCEDURE makeuser() LANGUAGE plpgsql 
AS $$
DECLARE
BEGIN
    INSERT INTO users (name,username) VALUES ('user1','fromproc');
 END $$;

CREATE OR REPLACE PROCEDURE createuser(newname varchar(100), newusername varchar(100)) LANGUAGE plpgsql  
AS $$
BEGIN
    INSERT INTO users (name,username) VALUES ($1, $2);
END $$;

CREATE OR REPLACE FUNCTION Multiply(factor int, INOUT val int) LANGUAGE plpgsql
AS $$
BEGIN
   val := factor*val;
END $$;
}}}

''Next page: [[!-Query-!][.DbFit.DbFitReference.CommandReference.QueryCommand]] Parent page: [[!-Command reference-!][.DbFit.DbFitReference.CommandReference]]''
