# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
name: Java CI with Gradle
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [ 'zulu', 'temurin' ]
        java: [ '8', '11' ]
    name: Java ${{ matrix.Java }} (${{ matrix.distribution }}) sample
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: dbfit
          POSTGRES_PASSWORD: dbfit
          POSTGRES_DB: dbfit
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      oracle-db:
        image: wnameless/oracle-xe-11g-r2
        ports:
          - 1521:1521
          #options: -v "$(pwd)/test_vm/scripts/oracle/sql:/docker-entrypoint-initdb.d:ro"
          #          --health-cmd "'test -f /tmp/dbfit-ora-setup-done.flag'"
          #--health-start-period 60s
          #--health-interval 10s
          #--health-timeout 5s
          #--health-retries 60
    steps:
    - uses: actions/checkout@v2
    - name: Set up java
      uses: actions/setup-java@v2
      with:
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew clean fastbuild
    - name: Oracle integration tests
      run: ./gradlew :dbfit-java:oracle:integrationTest
