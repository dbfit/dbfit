# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
name: build
on:
  push:
  pull_request:
  schedule:
    - cron: "0 5 * * *"
jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        distribution: [ 'zulu' ]
        java: [ '8', '11' ]
    name: Java ${{ matrix.Java }} (${{ matrix.distribution }}) sample

    services:

      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: dbfit
          MYSQL_USER: dbfit
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: rootpassword
        ports:
          - 3306:3306
        options: >-
          --name mysql
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: dbfit
          POSTGRES_PASSWORD: dbfit
          POSTGRES_DB: dbfit
        options: >-
          --name postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      oracle:
        image: gvenzl/oracle-xe:21
        ports:
          - 1521:1521
        env:
          ORACLE_URL: localhost:1521/XEPDB1
          ORACLE_PASSWORD: Oracle18
          ORACLE_ADMIN_PASSWORD: Oracle18
          ORACLE_ADMIN_USER: system
          NLS_LANG: AMERICAN_AMERICA.AL32UTF8
        options: >-
          --name dbfitora
          --health-cmd healthcheck.sh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

      db2:
        image: ibmcom/db2:latest
        ports:
          - 50000:50000
        env:
          DB2INST1_PASSWORD: db2inst1-pwd
          LICENSE: accept
          DBNAME: db2inst1
        options: >-
          --name dbfitdb2
          --privileged

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Wait for database containers initialization
      run: |
        for i in {1..60}; do echo "$i waiting for DB2 server startup"; docker logs dbfitdb2 2>&1 | grep 'Setup has completed' && echo "[DB2 UP]" && break || sleep 6; done

    - name: Copy database scripts
      run: |
        docker ps -a
        docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" dbfitora
        docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" dbfitdb2
        docker cp test_vm/scripts/oracle dbfitora:/tmp/dbfit_setup
        docker cp test_vm/scripts/db2 dbfitdb2:/tmp/dbfit_setup
        docker cp test_vm/scripts/postgresql postgres:/tmp/dbfit_setup
        docker cp test_vm/scripts/mysql mysql:/tmp/dbfit_setup

    - name: MySQL schemas setup
      run: docker exec -w /tmp/dbfit_setup mysql /bin/bash -i ./create_db_schema.sh

    - name: PostgreSQL schemas setup
      env:
        PGPASSWORD: dbfit
      run: docker exec -w /tmp/dbfit_setup postgres /bin/bash -i ./create_db_schema.sh

    - name: Db2 schemas setup
      run: docker exec -w /tmp/dbfit_setup dbfitdb2 /bin/bash -i ./create_db_schema.sh

    - name: Oracle schemas setup
      run: docker exec -w /tmp/dbfit_setup dbfitora /bin/bash -i ./create_db_schema.sh

    - name: Set up java
      uses: actions/setup-java@v2
      with:
        distribution: ${{ matrix.distribution }}
        java-version: ${{ matrix.java }}

    - name: MySQL integration tests
      run: ./gradlew :dbfit-java:mysql:integrationTest

    - name: PostgreSQL integration tests
      run: ./gradlew :dbfit-java:postgres:integrationTest

    - name: Oracle integration tests
      run: ./gradlew :dbfit-java:oracle:integrationTest

    - name: Db2 integration tests
      run: ./gradlew :dbfit-java:db2:integrationTest

    - name: Build and test
      run: ./gradlew --continue clean cibuild

    - name: Bundle
      run: ./gradlew bundle

    - name: Setup diag logs
      if: always()
      run: |
        mkdir diag
        test -d tmp || mkdir tmp
        docker logs mysql > diag/mysql.log 2>&1
        docker logs dbfitora > diag/dbfitora.log 2>&1
        docker logs dbfitdb2 > diag/dbfitdb2.log 2>&1
        docker logs postgres > diag/postgres.log 2>&1

    - name: Upload test Artifact
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-artifact
        path: |
          ${{ github.workspace }}/diag
          ${{ github.workspace }}/tmp
        retention-days: 1

    - name: Determine bundle name
      run: echo "project_bundle=`basename zips/*.zip`" >> $GITHUB_ENV

    - name: Upload zips artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.project_bundle }}
        path: ${{ github.workspace }}/zips/${{ env.project_bundle}}
